{
  "name": "gbxremote",
  "description": "A pure JavaScript GBXRemote client.",
  "keywords": [
    "xml-rpc",
    "xmlrpc",
    "xml",
    "rpc",
    "gbxremote",
    "maniaplanet",
    "trackmania",
    "shootmania",
    "questmania",
    "nadeo"
  ],
  "version": "0.1.4",
  "preferGlobal": false,
  "homepage": "https://github.com/MiniGod/node-gbxremote",
  "author": {
    "name": "Kristjan Broder Lund",
    "email": "kristjan.1234@gmail.com",
    "url": "https://github.com/MiniGod"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/MiniGod/node-gbxremote.git"
  },
  "bugs": {
    "url": "https://github.com/MiniGod/node-gbxremote/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/gbxremote.js",
  "dependencies": {
    "sax": "0.4.x",
    "xmlbuilder": "0.3.1",
    "barse": "~0.4.2"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.4",
    "npm": ">=1.0.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/MiniGod/node-gbxremote/raw/master/LICENSE"
    }
  ],
  "readme": "Node-GbxRemote\n===\n\nJavaScript ([node.js](http://nodejs.org)) port of [GbxRemote](http://code.google.com/p/manialive/source/browse/trunk/libraries/DedicatedApi/Xmlrpc/Client.php) by [Nadeo](http://www.nadeo.com),\nwhich is built on [Incutio XML-RPC Library](http://scripts.incutio.com/xmlrpc/).\n\nUsed to communicate with [ManiaPlanet](http://www.maniaplanet.com) servers.\n\n*Note: The API may, or may not change!*\n\nInstall\n---\n\n```bash\nnpm install gbxremote\n```\n\nTo Use\n---\n\nLook in [/examples/](https://github.com/MiniGod/node-gbxremote/tree/master/example) for all examples.\n\n---\n\nThe following examples expects that `var gbxremote = require('gbxremote')`.\n\n### Connecting:\n\nTo connect to a server, use `var client = gbxremote.createClient(port, [host], [callback]);`\n\n*Examples of ways to connect to the server:*\n\n```javascript\n// Connect with port only\nvar client = gbxremote.createClient(5000);\n\n// Connect with port and hostname\nvar client = gbxremote.createClient(5000, 'localhost');\n\n// Connect with port and ip\nvar client = gbxremote.createClient(5000, '127.0.0.1');\n\n// Connect with port only, and a callback\nvar client = gbxremote.createClient(5000, function(err) {\n\t// This callback is called both on connect and on error so we should check it.\n\tif (err) {\n\t\tconsole.error('Could not connect to server:', err);\n\t} else {\n\t\tconsole.log('Connection to server was successfull! Ready to send queries..');\n\t}\n});\n\n// Connect with port, ip and a callback\nvar client = gbxremote.createClient(5000, '127.0.0.1', function(err) {\n\t// Callback...\n});\n```\n\n### Querying:\n\nQueries are sent to the server by calling `client.query(method, [params], [callback]);`\n\n*Queries before the connect event has been emitted will be queued and sent on connect!*\n\n[See the full list of methods.](http://methods.xaseco.org/methodstmc.php)\n\n```javascript\nvar client = gbxremote.createClient(5000);\n\nclient.on('connect', function() {\n\t\n\t// GetVersion does not take any params.\n\tclient.query('GetVersion', function(err, res) {\n\t\tif (err) {\n\t\t\tconsole.error('Error when querying server:', err);\n\t\t} else {\n\t\t\tconsole.log('Server version:', res.join(', '));\n\t\t}\n\t});\n\t\n\t// GetPlayerInfo takes 2 parameters, 1 optional.\n\t// GetPlayerInfo(string login, [int compatibility])\n\tclient.query('GetPlayerInfo', ['minigod'], function(err, res) {\n\t\tif (err) {\n\t\t\tconsole.error('Error getting player info:', err);\n\t\t} else {\n\t\t\tconsole.log('Player info:');\n\t\t\tconsole.log(res);\n\t\t}\n\t});\n});\n```\n\n### Disconnecting:\n\n`client.terminate();`\n\n### Events:\n\n#### Event: connect()\n\nEmitted when connection to the server is successfull.  \nReady to receive queries!\n\n```javascript\nvar client = gbxremote.createClient(5000);\n\nclient.on('connect', function() {\n\tconsole.log('Connection successfull! Lets do some queries!');\n\tclient.query('GetVersion', function(err, res) {\n\t\tif (err)\n\t\t\tconsole.log(err);\n\t\telse\n\t\t\tconsole.log(res);\n\t});\n});\n```\nIf there is a problem connecting, the 'connect' event will not be emitted, the 'error' event will be emitted with the exception.\n\n#### Event: error(err)\n\nEmitted when:\n* Socket errors *(host is not listening on that port, loose connection, etc.)*\n* Handshake fails *(host* ***is*** *listening on that port, but its not a ManiaPlanet (GbxRemote 2) server)*\n\n```javascript\nvar client = gbxremote.createClient(80);\n\nclient.on('error', function(err) {\n\tconsole.error('Connection failed: ' + err);\n});\n```\n\n#### Event: callback(method, params)\n\nAfter sending `EnableCallbacks(true)` to the server, it will send you callbacks when stuff happend on the server.  \nEg:\n* `ManiaPlanet.ServerStart`\n* `ManiaPlanet.ServerStop`\n* `ManiaPlanet.PlayerConnect`\n* `ManiaPlanet.PlayerChat`\n\n[See the full list of callbacks](http://server.xaseco.org/callbacks2.php)\n\n```javascript\nvar client = gbxremote.createClient(5000);\n\nclient.on('connect', function() {\n\tclient.query('SetApiVersion', ['2012-06-19']);\n\tclient.query('EnableCallbacks', [true]);\n});\n\nclient.on('callback', function(method, params) {\n\tconsole.log(\"Callback from server: %s - %d params\", method, params.length);\n\t\n\t// This would be the typical place to have a switch statement. Please dont do that. Use the events, as shown below.\n});\n```\n\n#### Event: \\<method\\>(params)\n\nCallbacks will also emit separate events for each method. It's hard to explain. Learn from example:\n\n```javascript\nvar client = gbxremote.createClient(5000);\n\nclient.on('connect', function() {\n\t// Before enabling callbacks, make sure you set the latest API.\n\tclient.query('SetApiVersion', ['2012-06-19']);\n\tclient.query('EnableCallbacks', [true]);\n});\n\n// ManiaPlanet.PlayerConnect(string Login, bool IsSpectator);\nclient.on('ManiaPlanet.PlayerConnect', function(params) {\n\tconsole.log('%s just joined as a %s', params[0], params[1] ? 'spectator' : 'player');\n});\n\n// ManiaPlanet.PlayerDisconnect(string Login); \nclient.on('ManiaPlanet.PlayerDisconnect', function(params) {\n\tconsole.log('%s left the server', params[0]);\n});\n```\n\nThese events can basically take over the big switch statements that is normal in todays server controllers.\n\n#### Event: close(had_error)\n\nEmitted once the socket is fully closed.\nThe argument had_error is a boolean which says if the socket was closed due to a transmission error.\n\n```javascript\nvar client = gbxremote.createClient(5000);\n\nclient.on('connect', function() {\n\t// Connected...\n\t\n\t// Do stuff?\n\t\n\t// Disconnect\n\tclient.terminate();\n});\n\nclient.on('close', function(had_error) {\n\tconsole.log('Connection to the server has been closed');\n});\n``` \n\nTesting\n---\n\n*This section does not currently apply, because tests are not being maintained atm*  \n*Note: Tests have not been changed since fork, hence will not pass.*\n\n***TODO: Fix tests - Figure out how to do it with travis (and in general), since we need a running ManiaPlanet server to run tests - and we need to know*** *exactly* ***what the server will return.***\n\n[![Build\nStatus](https://secure.travis-ci.org/MiniGod/node-gbxremote.png)](http://travis-ci.org/MiniGod/node-gbxremote)\n\nXML-RPC must be precise so there are an extensive set of test cases in the test\ndirectory. [Vows](http://vowsjs.org/) is the testing framework and [Travis\nCI](http://travis-ci.org/MiniGod/node-gbxremote) is used for Continuous\nIntegration.\n\nTo run the test suite:\n\n`make test`\n\nIf submitting a bug fix, please update the appropriate test file too.\n\n\nThe License (MIT)\n---\n\nReleased under the MIT license. See the LICENSE file for the complete wording.\n\n",
  "readmeFilename": "README.md",
  "_id": "gbxremote@0.1.4",
  "dist": {
    "shasum": "c7ed22582e56051b4e17601b3dd5a3004eeefd43",
    "tarball": "http://registry.npmjs.org/gbxremote/-/gbxremote-0.1.4.tgz"
  },
  "_from": "gbxremote@>=0.1.4 <0.2.0",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "minigod",
    "email": "kristjan.1234@gmail.com"
  },
  "maintainers": [
    {
      "name": "minigod",
      "email": "kristjan.1234@gmail.com"
    }
  ],
  "_shasum": "c7ed22582e56051b4e17601b3dd5a3004eeefd43",
  "_resolved": "https://registry.npmjs.org/gbxremote/-/gbxremote-0.1.4.tgz"
}
